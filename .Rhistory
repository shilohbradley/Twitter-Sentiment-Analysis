axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank()) +
revenue
revenue <- ggplot(df_rev, aes(x = Category, y = Percent)) +
geom_col() +
labs(title = "Actual Revenue",
x = "",
y = "%") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank())
revenue
df_rev <- read.xlsx("./Finance Files/actual_revenue.xlsx")
names(df_rev) <- gsub("[.]", " ", names(df_rev))
revenue <- ggplot(df_rev, aes(x = Category, y = Percent)) +
geom_col() +
labs(title = "Actual Revenue",
x = "",
y = "%") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank())
revenue
ggsave("actual_revenue.jpg", width = 7, height = 5)
ggsave("actual_revenue.jpg", width = 8, height = 5)
revenue <- ggplot(df_rev, aes(x = Category, y = Percent)) +
geom_col() +
labs(title = "Actual Revenue",
x = "",
y = "%") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank())
ggsave("actual_revenue.jpg", width = 8, height = 5)
df_exp <- read.xlsx("./Finance Files/actual_expenditures.xlsx")
names(df_exp) <- gsub("[.]", " ", names(df_exp))
expenditures <- ggplot(df_rev, aes(x = Category, y = Percent)) +
geom_col() +
labs(title = "Actual Expenditures",
x = "",
y = "%") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank())
ggsave("actual_expenditures.jpg", width = 8, height = 5)
expenditures <- ggplot(df_exp, aes(x = Category, y = Percent)) +
geom_col() +
labs(title = "Actual Expenditures",
x = "",
y = "%") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank())
ggsave("actual_expenditures.jpg", width = 8, height = 5)
colnames(df_eg)
df_eg <- df_eg %>%
melt(., measure.vars = c( "Total E&G Current Funds Expenditures (millions)",
"Institutional Support Expenditures (millions)",
"Institutional Support as a percent of Total Expenditures"))
df_eg
require(plyr)
require(scales)
# ---------------------------------------------------------------------------------------------
# Formatting functions for ggplot  graph axis
# ---------------------------------------------------------------------------------------------
#' Human Numbers: Format numbers so they're legible for humans
#' Use this in ggplot for labels where you might use the comma or percent functions from the
#' Scales package.
#'
#' Checks whether numbers are positive or negative.
#' Allows up to 1 significant figure
#' sapply used for element-wise application of the humanity function as a vector may include
#' numbers where billions, millions or thousands are appropriate.
#'
#' @return a character vector the same length as the input vector
#' @param x a numeric vector to format,
#' @smbl a symbol you'd like to prefix your numbers by e.g. "$"
#' @signif = the number of significant places you want the function to return
#' @examples
#' human_numbers(c(1000000 , 1500000, 10000000000))
#' human_numbers(c(1.200000e+05, -2.154660e+05, 2.387790e+05, 4.343500e+04 ,5.648675e+12), "$")
#' ggplot2 + scale_y_continuous(labels = human_numbers)
#' ggplot2 + scale_x_continuous(labels = human_numbers)
#' ggplot2 + scale_x_continuous(labels = human_gbp)
human_numbers <- function(x = NULL, smbl ="", signif = 1){
humanity <- function(y){
if (!is.na(y)){
tn <- round(abs(y) / 1e12, signif)
b <- round(abs(y) / 1e9, signif)
m <- round(abs(y) / 1e6, signif)
k <- round(abs(y) / 1e3, signif)
if ( y >= 0 ){
y_is_positive <- ""
} else {
y_is_positive <- "-"
}
if ( k < 1 ) {
paste0( y_is_positive, smbl, round(abs(y), signif ))
} else if ( m < 1){
paste0 (y_is_positive, smbl,  k , "k")
} else if (b < 1){
paste0 (y_is_positive, smbl, m ,"m")
}else if(tn < 1){
paste0 (y_is_positive, smbl, b ,"bn")
} else {
paste0 (y_is_positive, smbl,  comma(tn), "tn")
}
} else if (is.na(y) | is.null(y)){
"-"
}
}
sapply(x,humanity)
}
#' Human versions of large currency numbers - extensible via smbl
human_gbp   <- function(x){human_numbers(x, smbl = "£")}
human_usd   <- function(x){human_numbers(x, smbl = "$")}
human_euro  <- function(x){human_numbers(x, smbl = "€")}
human_num   <- function(x){human_numbers(x, smbl = "")}
eg <- ggplot(df_eg, aes(x = `Fiscal Year`, y = value, fill = variable)) +
geom_point() +
geom_line() +
labs(title = "E&G Institutional Support Expenditures",
x = "Fiscal Year",
y = "") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank()) +
scale_y_continuous(labels = human_usd) +
expand_limits(y = 0)
eg
eg <- ggplot(df_eg, aes(x = `Fiscal Year`, y = value, shape = variable)) +
geom_point() +
geom_line() +
labs(title = "E&G Institutional Support Expenditures",
x = "Fiscal Year",
y = "") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank()) +
scale_y_continuous(labels = human_usd) +
expand_limits(y = 0)
eg
eg <- ggplot(df_eg, aes(x = `Fiscal Year`, y = value, shape = variable)) +
geom_point() +
geom_line() +
labs(title = "E&G Institutional Support Expenditures",
x = "Fiscal Year",
y = "") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank()) +
scale_y_continuous(labels = human_usd) +
guides(fill = guide_legend(title = "States")) +
expand_limits(y = 0)
eg
eg <- ggplot(df_eg, aes(x = `Fiscal Year`, y = value, shape = variable)) +
geom_point() +
geom_line() +
labs(title = "E&G Institutional Support Expenditures",
x = "Fiscal Year",
y = "") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank()) +
scale_y_continuous(labels = human_usd) +
guides(shape = guide_legend(title = "States")) +
expand_limits(y = 0)
eg
eg <- ggplot(df_eg, aes(x = `Fiscal Year`, y = value, shape = variable)) +
geom_point() +
geom_line() +
labs(title = "E&G Institutional Support Expenditures",
x = "Fiscal Year",
y = "") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank()) +
scale_y_continuous(labels = human_usd) +
guides(shape = guide_legend(title = "")) +
expand_limits(y = 0)
eg
ggsave("inst_support_expenditures.jpg", width = 7, height = 5)
ggsave("inst_support_expenditures.jpg", width = 9, height = 5)
ggsave("inst_support_expenditures.jpg", width = 10, height = 5)
eg <- ggplot(df_eg, aes(x = `Fiscal Year`, y = value, shape = variable)) +
geom_point() +
geom_line() +
labs(title = "E&G Institutional Support Expenditures",
x = "Fiscal Year",
y = "") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank()) +
scale_y_continuous(labels = human_usd) +
guides(shape = guide_legend(title = "")) +
expand_limits(y = 0)
eg
ggsave("inst_support_expenditures.jpg", width = 10, height = 5)
df_eg <- read.xlsx("./Finance Files/eg_inst_support_expenditures.xlsx")
names(df_eg) <- gsub("[.]", " ", names(df_eg))
df_eg <- df_eg %>%
melt(., measure.vars = c( "Total E&G Current Funds Expenditures",
"Institutional Support Expenditures",
"Institutional Support as a percent of Total Expenditures"))
eg <- ggplot(df_eg, aes(x = `Fiscal Year`, y = value, shape = variable)) +
geom_point() +
geom_line() +
labs(title = "E&G Institutional Support Expenditures",
x = "Fiscal Year",
y = "") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank()) +
scale_y_continuous(labels = human_usd) +
guides(shape = guide_legend(title = "")) +
expand_limits(y = 0)
eg
ggsave("inst_support_expenditures.jpg", width = 10, height = 5)
ggsave("inst_support_expenditures.jpg", width = 8, height = 5)
ggsave("inst_support_expenditures.jpg", width = 9, height = 5)
df_rev <- read.xlsx("./Finance Files/actual_revenue.xlsx")
names(df_rev) <- gsub("[.]", " ", names(df_rev))
revenue <- ggplot(df_rev, aes(x = Category, y = Percent)) +
geom_col() +
labs(title = "2017-18 Actual Revenue",
x = "",
y = "%") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank())
ggsave("actual_revenue.jpg", width = 8, height = 5)
df_exp <- read.xlsx("./Finance Files/actual_expenditures.xlsx")
names(df_exp) <- gsub("[.]", " ", names(df_exp))
expenditures <- ggplot(df_exp, aes(x = Category, y = Percent)) +
geom_col() +
labs(title = "2017-18 Actual Expenditures",
x = "",
y = "%") +
theme_classic() +
theme(title = bold.text,
axis.title = bold.text,
axis.text.x = bold.text,
axis.text.y = bold.text) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
theme(legend.title = element_text(size = 12, color = "black", face = "bold"),
legend.position = "bottom",
legend.background = element_rect(fill = "gray90", size = .5, linetype = "dotted"),
legend.key = element_blank())
ggsave("actual_expenditures.jpg", width = 8, height = 5)
shiny::runApp('/Volumes/Staff/Groups/Decision Support/Exchange/Shiloh/R/TimeToDegree')
setwd("/Volumes/Staff/Groups/Decision Support/Exchange/")
setwd("/Volumes/Staff/Groups/Decision Support/Exchange/Bobby - Exchange/Faculty Student Performance/")
library(readxl)
library(dplyr)
library(tidyr)
# setwd("X:/Groups/Decision Support/Exchange/Bobby - Exchange/Faculty Student Performance")
df <- read_excel("Multiple Course Attempts 2.xlsx", sheet = "WIP")
test <- head(df)
count_course_titles <- function(df) {
count <- list()
a <- 1
for(i in 2:length(df$`Unique ID - STDNT_ID, CRSE_SUBJECT, CRSE_CATALOG_NUMBER`)) {
if(df$CRSE_TITLE[i] == df$CRSE_TITLE[i - 1]) {
count <- a + 1
# for(i in ) {
#
# }
}
a <- 1
}
return(count)
}
test$COUNT <- count_course_titles(test)
library(openxlsx)
library(dplyr)
library(tidyr)
# setwd("X:/Groups/Decision Support/Exchange/Bobby - Exchange/Faculty Student Performance")
df <- read.xlsx("Multiple Course Attempts 2.xlsx", sheet = "WIP")
test <- head(df)
count_course_titles <- function(df) {
count <- list()
a <- 1
for(i in 2:length(df$`Unique ID - STDNT_ID, CRSE_SUBJECT, CRSE_CATALOG_NUMBER`)) {
if(df$CRSE_TITLE[i] == df$CRSE_TITLE[i - 1]) {
count <- a + 1
# for(i in ) {
#
# }
}
a <- 1
}
return(count)
}
test$COUNT <- count_course_titles(test)
View(test)
View(test)
test$COUNT <- count_course_titles(test)
library(readxl)
library(dplyr)
library(tidyr)
# setwd("X:/Groups/Decision Support/Exchange/Bobby - Exchange/Faculty Student Performance")
df <- read_excel("Multiple Course Attempts 2.xlsx", sheet = "WIP")
test <- head(df)
count_course_titles <- function(df) {
count <- list()
a <- 1
for(i in 2:length(df$`Unique ID - STDNT_ID, CRSE_SUBJECT, CRSE_CATALOG_NUMBER`)) {
if(df$CRSE_TITLE[i] == df$CRSE_TITLE[i - 1]) {
count <- a + 1
# for(i in ) {
#
# }
}
a <- 1
}
return(count)
}
test$COUNT <- count_course_titles(test)
View(test)
test2 <- df %>% slice()
?slice''
?slice()
test2 <- df %>% slice(., 1:100)
test2$COUNT <- count_course_titles(test2)
View(test2)
count <- list()
a <- 1
for(i in 2:length(df$`Unique ID - STDNT_ID, CRSE_SUBJECT, CRSE_CATALOG_NUMBER`)) {
if(df$CRSE_TITLE[i] == df$CRSE_TITLE[i - 1]) {
count <- a + 1
}
a <- 1
}
View(test2)
source('~/Documents/GitHub/Twitter-Sentiment-Analysis/03 - GetTweets.R')
View(dataFrame_backup)
View(dataFrame)
key <- "x0iH8emt6imshUOM7omzZZMntv73p19C1HJjsnTbSPquMgJKij"
results <- myTwitter$getSentiment(dataFrame, mykey)
results <- myTwitter$getSentiment(dataFrame, key)
View(results)
as.data.frame(results)
dataFrame <- results[[1]]
words <- results[[2]]
View(dataFrame)
myPlot <- myTwitter$getPlot(dataFrame)
myPlot
freq <- myTwitter$freqTable(dataFrame)
freq <- data.frame(words = names(freq), freq)
words <- left_join(words, freq)
View(dataFrame)
View(words)
View(freq)
source('~/Documents/GitHub/Twitter-Sentiment-Analysis/03 - GetTweets.R')
warnings()
dataFrame <- myTwitter$removeRTs(dataFrame)
dataFrame <- myTwitter$convertEmojis(dataFrame)
dataFrame <- myTwitter$findNReplace(dataFrame, emDict)
dataFrame_backup <- dataFrame
results <- myTwitter$getSentiment(dataFrame, key)
dataFrame <- results[[1]]
words <- results[[2]]
myPlot <- myTwitter$getPlot(dataFrame)
myPlot
freq <- myTwitter$freqTable(dataFrame)
freq <- data.frame(words = names(freq), freq)
words <- left_join(words, freq)
source('~/Documents/GitHub/Twitter-Sentiment-Analysis/03 - GetTweets.R')
dataFrame_backup <- dataFrame
dataFrame <- myTwitter$excludeUsers(dataFrame, dict)
dataFrame <- unique(dataFrame)
##Remove the tweets by users with dictionaries in their name using grep
dataFrame <- myTwitter$removeUsername(dataFrame)
dataFrame <- myTwitter$removeTweetID(dataFrame)
dataFrame_backup <- dataFrame #Have a back up dataFrame in case something goes wrong
dataFrame <- myTwitter$removeRTs(dataFrame)
dataFrame <- myTwitter$convertEmojis(dataFrame)
dataFrame <- myTwitter$findNReplace(dataFrame, emDict)
dataFrame_backup <- dataFrame
results <- myTwitter$getSentiment(dataFrame, key)
dataFrame <- results[[1]]
words <- results[[2]]
myPlot <- myTwitter$getPlot(dataFrame)
myPlot
freq <- myTwitter$freqTable(dataFrame)
freq <- data.frame(words = names(freq), freq)
words <- left_join(words, freq)
myPlot
source('~/Documents/GitHub/Twitter-Sentiment-Analysis/03 - GetTweets.R')
source('~/Documents/GitHub/Twitter-Sentiment-Analysis/03 - GetTweets.R')
source('~/Documents/GitHub/Twitter-Sentiment-Analysis/03 - GetTweets.R')
warnings()
dataFrame_backup <- dataFrame
dataFrame <- myTwitter$excludeUsers(dataFrame, dict)
dataFrame <- unique(dataFrame)
View(dataFrame)
dataFrame <- myTwitter$excludeUsers(dataFrame, dict)
dataFrame <- unique(dataFrame)
##Remove the tweets by users with dictionaries in their name using grep -----
dataFrame <- myTwitter$removeUsername(dataFrame)
dataFrame <- myTwitter$removeTweetID(dataFrame)
dataFrame_backup <- dataFrame
dataFrame <- myTwitter$getAll(dict$LW, dict$LHash)
View(dataFrame)
dataFrame <- myTwitter$convertEmojis(dataFrame)
dataFrame <- myTwitter$findNReplace(dataFrame, emDict)
dataFrame_backup <- dataFrame
dataFrame <- myTwitter$findNReplace(dataFrame, emDict)
View(dataFrame_backup)
##Remove the tweets by users with dictionaries in their name using grep -----
dataFrame <- myTwitter$removeUsername(dataFrame)
dataFrame <- myTwitter$removeTweetID(dataFrame)
dataFrame_backup <- dataFrame
dataFrame <- myTwitter$removeRTs(dataFrame)
dataFrame <- myTwitter$convertEmojis(dataFrame)
dataFrame <- myTwitter$findNReplace(dataFrame, emDict)
results <- myTwitter$getSentiment(dataFrame, key)
emDict <- download.file("https://unicode.org/emoji/charts/full-emoji-list.html",
destfile = tmp, method = "curl")
dataFrame <- results[[1]]
words <- results[[2]]
myPlot <- myTwitter$getPlot(dataFrame)
myPlot
freq <- myTwitter$freqTable(dataFrame)
freq <- data.frame(words = names(freq), freq)
words <- left_join(words, freq)
